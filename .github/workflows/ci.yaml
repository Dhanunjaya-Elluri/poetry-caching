name: git

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - main

jobs:
  flask-app-ci:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo & set up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      #----------------------------------------------
      #       Install & set config for poetry
      #----------------------------------------------
      - name: Install and Configure Poetry
        uses: abatilo/actions-poetry@v2 # snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       Load cached venv if exists
      #----------------------------------------------
      - name: Load cached venv if exists
        id: load-cached-venv-if-exists
        uses: actions/cache@v3
        with:
          path: |
            flask-app/.venv
          key: venv-${{ hashFiles('flask-app/poetry.lock') }}

      #----------------------------------------------
      #        Install dependencies if no cache
      #----------------------------------------------
      - name: Install dependencies
        working-directory: flask-app
        if: steps.load-cached-venv-if-exists.outputs.cache-hit != 'true'
        run: |
          poetry install

      #----------------------------------------------
      #        Run formatting and linting
      #----------------------------------------------
      - name: Format check with isort
        working-directory: flask-app
        run: |
          poetry run isort --check .

      - name: Format check with black
        working-directory: flask-app
        run: |
          poetry run black --check .

      - name: Lint check with ruff
        working-directory: flask-app
        run: |
          poetry run ruff check .


      #----------------------------------------------
      #        Set up docker cache
      #----------------------------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker Images
        uses: ScribeMD/docker-cache@0.3.7
        with:
          key: docker-${{ runner.os }}-${{ hashFiles('docker-compose.yaml') }}

      #----------------------------------------------
      #        Run tests with docker build
      #----------------------------------------------
      - name: Run tests
        run: |
          docker-compose -f docker-compose.yml build

      - name: Docker clean up
        run: |
          docker-compose -f docker-compose.yml down
